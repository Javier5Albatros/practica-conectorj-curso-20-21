package chat;

import chat.model.ChatRoom;
import chat.model.Message;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;


public class Controller {

    private final String DB_SERVER = "127.0.0.1";
    private final int DB_PORT = 3306;
    private final String DB_NAME = "chat";
    private final String DB_USER = "root";
    private final String DB_PASS = "root";

    private Connection conn;

    /**
     * Crea un nuevo controlador
     */
    public Controller () {

        try {
            Class.forName("org.mariadb.jdbc.Driver");

            String url = "jdbc:mariadb://" + DB_SERVER + ":" + DB_PORT + "/" + DB_NAME;
            this.conn = DriverManager.getConnection(url, DB_USER, DB_PASS);

        } catch (Exception e) {
            System.err.println("Ha ocurrido un error al conectar con la base de datos");
            e.printStackTrace();
        }
    }

    /**
     * Crea un nuevo usuario en la aplicación
     * @param nickname nombre de usuario
     * @return id del nuevo usuario creado
     * @throws SQLException
     */
    public long createUser(String nickname) throws SQLException {
        PreparedStatement stm = conn.prepareStatement("INSERT INTO USERS (username) VALUES (?)", Statement.RETURN_GENERATED_KEYS);
        stm.setString(1, nickname);

        stm.execute();
        return this.getAutogeneratedId(stm);
    }

    /**
     * Crea una nueva sala de chat
     * @param userpk id del usuario que crea la sala de chat
     * @param CRName nombre de la sala de chat
     * @return id de la nueva sala de chat creada
     * @throws SQLException
     */
    public long createChatRoom (long userpk, String CRName) throws SQLException {
        PreparedStatement stm = conn.prepareStatement("INSERT INTO CHATROOMS (name, createdBy) VALUES (?, ?)", Statement.RETURN_GENERATED_KEYS);
        stm.setString(1, CRName);
        stm.setString(2, String.valueOf(userpk));

        stm.execute();
        System.out.println("asdads"+this.getAutogeneratedId(stm));
        return this.getAutogeneratedId(stm);
    }

    /**
     * Crea un nuevo mensaje en una sala de chat
     * @param userpk id del usuario que crea el mensaje
     * @param chatRoompk id de la sala de chat en la que se crea el mensaje
     * @param content contenido del mensaje
     * @throws SQLException
     */
    public void sendMessage (long userpk, long chatRoompk, String content) throws SQLException {
        PreparedStatement stm = conn.prepareStatement("INSERT INTO messages (text, chatroom, createdby) VALUES (?, ?, ?)");
        stm.setString(1, content);
        stm.setString(2, String.valueOf(chatRoompk));
        stm.setString(3, String.valueOf(userpk));

        stm.execute();
    }

    /**
     * Recupera los mensajes de una sala de chat
     * @param chatRoompk id de la sala de chat
     * @return Lista de mensajes
     * @throws SQLException
     */
    public List<Message> getMessages (long chatRoompk) throws SQLException {
        List<Message> messages = new ArrayList<>();
        ResultSet rs;
        PreparedStatement stm = conn.prepareStatement("SELECT TEXT, CREATEDBY FROM MESSAGES WHERE CHATROOM LIKE (?)");
        stm.setString(1, String.valueOf(chatRoompk));
        rs = stm.executeQuery();

        while(rs.next()) {
            messages.add(new Message(rs.getString("text"), rs.getString("createdby")));
        }

        rs.close();
        return messages;
    }

    /**
     * Recupera un listado con todas las salas de chat
     * @return listado con las salas de chat
     * @throws SQLException
     */
    public List<ChatRoom> getChatRooms () throws SQLException {
        List<ChatRoom> chatRooms = new ArrayList<>();
        ResultSet rs;
        PreparedStatement stm = conn.prepareStatement("SELECT ID, NAME FROM CHATROOMS");

        rs = stm.executeQuery();

        while(rs.next()) {
            chatRooms.add(new ChatRoom(rs.getLong("id"), rs.getString("name")));
        }

        rs.close();
        return chatRooms;
    }

    /**
     * Devuelve el id generado por un Statement
     * @param stmt el Statement
     * @return el id
     * @throws SQLException
     */
    private long getAutogeneratedId (Statement stmt) throws SQLException {
        ResultSet keys = stmt.getGeneratedKeys();
        keys.next();
        return keys.getLong(1);
    }

    /**
     * Borra los mensajes de un chat y de un usuario específico
     * @param nickname el nombre (string) del usuario
     * @param chatRoompk el ID de la sala de chat
     * @return el número de mensajes borrados
     * @throws SQLException
     */
    public int deleteMessages (String nickname, long chatRoompk) throws SQLException {
        PreparedStatement stm = conn.prepareStatement("DELETE messages FROM MESSAGES INNER JOIN USERS ON USERS.ID = MESSAGES.CREATEDBY WHERE USERNAME LIKE (?) AND chatroom LIKE (?)");
        stm.setString(1, nickname);
        stm.setString(2, String.valueOf(chatRoompk));
        return stm.executeUpdate();
    }
}
